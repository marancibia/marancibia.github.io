[
  {
    "name" : "Lab 1 - Get Started with OML4Py on Autonomous Database",
    "description" : null,
    "tags" : null,
    "version" : "6",
    "layout" : "jupyter",
    "type" : "low",
    "readOnly" : true,
    "snapshot" : false,
    "template" : "No Template",
    "templateConfig" : null,
    "paragraphs" : [
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829564819,
          "endTime" : 1689829564916,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h3><strong>Initiate a call to the Python interpreter</strong></h3>\n<p>To run Python commands in a notebook, you must first connect to the Python interpreter. This occurs as a result of running your first <code>%python</code> paragraph. To use OML4Py, you must import the <code>oml</code> module, which automatically establishes a connection to your database. In an Oracle Machine Learning notebook, you can add multiple paragraphs, and each paragraph can be connected to different interpreters such as SQL or Python. This example shows you how to:</p>\n<ul>\n<li>Connect to a Python interpreter to run Python commands in a notebook</li>\n<li>Import the Python modulesâ€”oml, pandas, numpy, and matplotlib</li>\n<li>Check if the oml module is connected to the database</li>\n</ul>\n<p>Note: <strong><code>z</code></strong> is a reserved keyword and must not be used as a variable in %python paragraphs in Oracle Machine Learning Notebooks. You will see <code>z.show()</code> fucntion used in the examples to display Python object and proxy object content.</p>\n<p><strong>Copyright (c) 2023 Oracle Corporation</strong>\n<br  /><a href=\"https: //oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0</a></p>\n<hr />\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689918611522,
          "endTime" : 1689918625268,
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829634902,
          "endTime" : 1689829634999,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h4><strong>Verify Connection to the Autonomous Database</strong></h4>\n<p>Using the default interpreter bindings, OML Notebooks automatically establishes a database connection for the notebook.</p>\n<p>To verify the Python interpreter has established a database connection through the <code>oml</code> module, run the command shown below.  If the notebook is connected, the command returns <code>True</code>.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829576502,
          "endTime" : 1689829576617,
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "True\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829621425,
          "endTime" : 1689829621521,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h4><strong>View Help Files</strong></h4>\n<p>The Python help function is used to display the documentation of packages, modules, functions, classes, and keywords. The help function has the following syntax:</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : "[{\"raw\":{\"height\":400,\"lastColumns\":[],\"version\":1}}]",
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829576902,
          "endTime" : 1689829577073,
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Help on list object:\n\nclass list(object)\n |  list(iterable=(), /)\n |  \n |  Built-in mutable sequence.\n |  \n |  If no argument is given, the constructor creates a new empty list.\n |  The argument must be an iterable if specified.\n |  \n |  Methods defined here:\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  __iadd__(self, value, /)\n |      Implement self+=value.\n |  \n |  __imul__(self, value, /)\n |      Implement self*=value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the list.\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  __sizeof__(self, /)\n |      Return the size of the list in memory, in bytes.\n |  \n |  append(self, object, /)\n |      Append object to the end of the list.\n |  \n |  clear(self, /)\n |      Remove all items from list.\n |  \n |  copy(self, /)\n |      Return a shallow copy of the list.\n |  \n |  count(self, value, /)\n |      Return number of occurrences of value.\n |  \n |  extend(self, iterable, /)\n |      Extend list by appending elements from the iterable.\n |  \n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  insert(self, index, object, /)\n |      Insert object before index.\n |  \n |  pop(self, index=-1, /)\n |      Remove and return item at index (default last).\n |      \n |      Raises IndexError if list is empty or index is out of range.\n |  \n |  remove(self, value, /)\n |      Remove first occurrence of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  reverse(self, /)\n |      Reverse *IN PLACE*.\n |  \n |  sort(self, /, *, key=None, reverse=False)\n |      Sort the list in ascending order and return None.\n |      \n |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n |      order of two equal elements is maintained).\n |      \n |      If a key function is given, apply it once to each list item and sort them,\n |      ascending or descending, according to their function values.\n |      \n |      The reverse flag can be set to sort in descending order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829602293,
          "endTime" : 1689829602396,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h4>For example</h4>\n<ul>\n<li>View the help files for the <code>oml.create</code> function, type the below code.</li>\n</ul>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : "[{\"raw\":{\"height\":400,\"lastColumns\":[],\"version\":1}}]",
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829577390,
          "endTime" : 1689829577509,
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Help on cython_function_or_method in module oml.core.methods:\n\ncreate(x, table, oranumber=True, dbtypes=None, append=False, comments=None)\n    Creates a table in Oracle Database from a Python data set.\n    \n    Parameters\n    ----------\n    x : pandas.DataFrame or a list of tuples of equal size\n      If ``x`` is a list of tuples of equal size, each tuple represents\n      a row in the table. The column names are set to COL1, COL2, ... and so on.\n    table : str\n      A name for the table.\n    oranumber : bool, True (default)\n      If True, use SQL NUMBER for numeric columns. Otherwise, use BINARY_DOUBLE.\n      Ignored if ``append`` is True.\n    dbtypes : dict mapping str to str or list of str\n      A list of SQL types to use on the new table. If a list, its length should\n      be equal to the number of columns. If a dict, the keys are the names of the\n      columns. Ignored if ``append`` is True.\n    append : bool, False (default)\n      Indicates whether to append the data to the existing table.\n    comments : str - comment for table\n               list of str : Multiline comments for table\n    \n    Notes\n    -----\n     * When creating a new table, for columns whose SQL types are not specified in\n       ``dbtypes``, NUMBER is used for numeric columns when ``oranumber`` is True\n       and BINARY_DOUBLE is used when ``oranumber`` is False. Users should set\n       ``oranumber`` to False when the data contains NaN values. For string columns,\n       the default type is VARCHAR2(4000), and for bytes columns, the default type\n       is BLOB.\n     * When ``x`` is specified with an empty pandas.DataFrame, OML creates an\n       empty table. NUMBER is used for numeric columns when ``oranumber`` is True\n       and BINARY_DOUBLE is used when ``oranumber`` is False. VARCHAR2(4000) is\n       used for columns of object dtype in the pandas.DataFrame.\n     * OML does not support columns containing values of multiple data types,\n       data conversion is needed or a TypeError may be raised.\n     * OML determines default column types by looking at 20 random rows sampled\n       from the table. For tables with less than 20 rows, all rows are used\n       in column type determination. NaN values are considered as float type.\n       If a column has all Nones, or has inconsistent data types that are not\n       None in the sampled rows, a default column type cannot be determined,\n       and a ValueError is raised unless a SQL type for the column is specified\n       in ``dbtypes``.\n    \n    Returns\n    -------\n    new_table : oml.DataFrame\n      A proxy object that represents the newly-created table.\n\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829667084,
          "endTime" : 1689829667186,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h4>Another example</h4>\n<ul>\n<li>View the help files for the <code>oml</code> module by typing the code below.</li>\n</ul>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : "[{\"raw\":{\"height\":400,\"lastColumns\":[],\"version\":1}},{\"html\":{\"height\":400,\"lastColumns\":[]},\"raw\":{\"height\":400,\"lastColumns\":[],\"version\":1}}]",
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1689829577798,
          "endTime" : 1689829578391,
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Help on package oml:\n\nNAME\n    oml - Oracle Machine Learning for Python\n\nDESCRIPTION\n    A component of Oracle Machine Learning, Oracle Machine Learning for Python (OML4Py)\n    makes the open source Python programming language and environment ready for enterprise\n    in-database data. Designed for problems involving both large and small volumes of data,\n     Oracle Machine Learning for Python integrates Python with Oracle Database.\n    Python users can run Python commands and scripts for statistical, machine learning,\n    and graphical analyses on data stored in Oracle Database. Python users can develop,\n    refine, and deploy Python scripts that leverage the parallelism and scalability of\n    Oracle Database to automate data analysis. Data analysts and data scientists can run\n    Python modules and develop and operationalize Python scripts for machine learning\n    applications in one step without having to learn SQL. Oracle Machine Learning for\n    Python performs function pushdown to leverage the database as a high-performance\n    compute engine for core Python and popular Python module functions.\n\nPACKAGE CONTENTS\n    algo (package)\n    automl (package)\n    core (package)\n    ds (package)\n    embed (package)\n    graphics (package)\n    metrics (package)\n    mlx (package)\n    script (package)\n\nCLASSES\n    oml.algo.model.odmModel(builtins.object)\n        oml.algo.ai.ai\n        oml.algo.ar.ar\n        oml.algo.dt.dt\n        oml.algo.em.em\n        oml.algo.esa.esa\n        oml.algo.esm.esm\n        oml.algo.glm.glm\n        oml.algo.km.km\n        oml.algo.nb.nb\n        oml.algo.nmf.nmf\n        oml.algo.nn.nn\n        oml.algo.rf.rf\n        oml.algo.svd.svd\n        oml.algo.svm.svm\n        oml.algo.xgb.xgb\n    oml.core.number._Number(oml.core.series._Series)\n        oml.core.float.Float\n        oml.core.integer.Integer\n    oml.core.series._Series(oml.core.vector._Vector)\n        oml.core.boolean.Boolean\n        oml.core.bytes.Bytes\n        oml.core.datetime.Datetime\n        oml.core.string.String\n        oml.core.timedelta.Timedelta\n        oml.core.timezone.Timezone\n    oml.core.vector._Vector(builtins.object)\n        oml.core.frame.DataFrame\n    \n    class Boolean(oml.core.series._Series)\n     |  Boolean series data class.\n     |  \n     |  Represents a single column of 0, 1, and NULL values in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Boolean\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __and__(self, other)\n     |  \n     |  __init__(self)\n     |  \n     |  __invert__(self)\n     |  \n     |  __or__(self, other)\n     |  \n     |  all(self)\n     |      Checks whether all elements in the Boolean series data object are True.\n     |      \n     |      Returns\n     |      =======\n     |      all: bool\n     |  \n     |  any(self)\n     |      Checks whether any elements in the Boolean series data object are True.\n     |      \n     |      Returns\n     |      -------\n     |      any: bool\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of bool and None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class Bytes(oml.core.series._Series)\n     |  Bytes(other, dbtype)\n     |  \n     |  Binary series data class.\n     |  \n     |  Represents a single column of RAW or BLOB data in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Bytes\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, other, dbtype)\n     |      Convert underlying Oracle Database type.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Bytes\n     |      dbtype : 'raw' or 'blob'\n     |  \n     |  len(self)\n     |      Computes the length of each byte string.\n     |      \n     |      Returns\n     |      -------\n     |      length : oml.Float\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of bytes and None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class DataFrame(oml.core.vector._Vector)\n     |  DataFrame(other)\n     |  \n     |  Tabular dataframe class.\n     |  \n     |  Represents multiple columns of Boolean, Bytes, Float, and/or String data.\n     |  \n     |  Method resolution order:\n     |      DataFrame\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, strata_cols=None, use_hash=True, hash_cols=None, nvl=None)\n     |      Splits the oml.DataFrame object randomly into k consecutive folds.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      strata_cols : a list of string values or None (default)\n     |        Names of the columns used for stratification. If None, stratification\n     |        is not performed. Must be None when ``use_hash`` is False.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      hash_cols : a list of string values or None (default)\n     |        If a list of string values, use the values from these named columns\n     |        to hash to split the data. If None, use the values from the 1st 10\n     |        columns to hash.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of k 2-tuples of oml.DataFrame objects\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``hash_cols`` refers to a single LOB column.\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean, str, list of str, 2-tuple\n     |        * oml.Boolean : select only the rows satisfying the condition. Must be from the same data\n     |          source as self.\n     |        * str : select the column of the same name\n     |        * list of str : select the columns whose names matches the elements in the list.\n     |        * 2-tuple : The first element in the tuple denotes which rows to select.\n     |          It can be either a oml.Boolean or ``slice(None)`` (this selects all\n     |          rows). The second element in the tuple denotes which columns to select.\n     |          It can be either ``slice(None)`` (this selects all columns), str, list\n     |          of str, int, or list of int. If int or list of int, selects the\n     |          column(s) in the corresponding position(s).\n     |      \n     |      Returns\n     |      -------\n     |      subset : OML data object\n     |        Is a oml.DataFrame if has more than one column, otherwise is a OML series data object.\n     |  \n     |  __init__(self, other)\n     |      Convert OML series data object(s) to oml.DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object or dict mapping str to OML series data objects\n     |        * OML series data object : initializes a single-column oml.DataFrame containing the\n     |          same data. \n     |        * dict : initializes a oml.DataFrame that comprises all the OML series data objects\n     |          in the dict in an arbitrary order. Each column in the resulting oml.DataFrame has as\n     |          its column name its corresponding key in the dict.\n     |  \n     |  corr(self, method='pearson', min_periods=1, skipna=True)\n     |      Computes pairwise correlation between all columns where possible,\n     |      given the type of coefficient.\n     |      \n     |      Parameters\n     |      ----------\n     |      method : 'pearson' (default), 'kendall', or 'spearman'\n     |        * pearson : Uses Pearson's correlation coefficient. Can only calculate\n     |          correlations between Float or Integer or Boolean columns.\n     |        * kendall : Uses Kendall's tau-b coefficient.\n     |        * spearman : Uses Spearman's rho coefficient.\n     |      min_periods : int, optional, 1 (default)\n     |        The minimum number of observations required per pair of columns to \n     |        have a valid result.\n     |      skipna : bool, True (default)\n     |        If True, NaN and (+/-)Inf values are mapped to NULL.\n     |      \n     |      Returns\n     |      -------\n     |      y : :py:class:`pandas.DataFrame`\n     |  \n     |  count(self, numeric_only=False)\n     |      Returns the number of elements that are not NULL for each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      numeric_only : boolean, False (default)\n     |        Includes only Float, Integer and Boolean columns.\n     |      \n     |      Returns\n     |      -------\n     |      count : :py:class:`pandas.Series`\n     |  \n     |  crosstab(self, index, columns=None, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name='All', dropna=True, normalize=False, pivot=False)\n     |      Computes a simple cross-tabulation of two or more columns. By default,\n     |      computes a frequency table for the columns unless a column and\n     |      an aggregation function have been passed.\n     |      \n     |      Parameters\n     |      ----------\n     |      index : str or list of str\n     |        Names of the column(s) of the DataFrame to group by. If ``pivot`` is\n     |        True, these columns are displayed in the rows of the result table.\n     |      columns : str or list of str, optional\n     |        Names of the other column(s) of the Dataframe to group by. If ``pivot``\n     |        is True, these columns are displayed in the columns of the result\n     |        table.\n     |      values : str, optional\n     |        The name of the column to aggregate according to the grouped columns.\n     |        Requires ``aggfunc`` to be specified.\n     |      aggfunc : OML DataFrame aggregation function object, optional\n     |        The supported oml.DataFrame aggregation functions include: count, \n     |        max, mean, median, min, nunique, std and sum. To use ``aggfunc``, \n     |        specify the function object using its full name, for example, \n     |        ``oml.DataFrame.sum``, ``oml.DataFrame.nunique``, and so on.\n     |        If specified, requires ``values`` to also be specified.\n     |      rownames : str or list of str, None (default)\n     |        If specified, must match number of names in ``index``. If None, names in\n     |        ``index`` are used. \n     |      colnames : str or list of str, None (default)\n     |        If specified, must match number of strings in ``columns``. If None,\n     |        names in ``columns`` are used. Ignored if ``pivot`` is True.\n     |      margins : bool, False (default)\n     |        Includes row and column margins (subtotals)\n     |      margins_name : str, 'All' (default)\n     |        Names of the row and column that contain the totals when ``margins``\n     |        is True. Should be a value not contained in any of the columns specified\n     |        by ``index`` and ``columns``. \n     |      dropna : bool, True (default)\n     |        In addition, if ``pivot`` is True, drops columns from the result\n     |        table if all the entries of the column are NaN.\n     |      normalize : boolean, {'all', 'index', 'columns'} or {0, 1}, False (default)\n     |        Normalizes by dividing the values by their sum.\n     |      \n     |        * If 'all' or True, normalizes over all values.\n     |        * If 'index' or 0, normalizes over each row.\n     |        * If 'columns' or 1, normalizes over each column.\n     |        * If ``margins`` is True, also normalizes margin values.\n     |      pivot : bool, False (default)\n     |        If True, returns results in pivot table format. Else, returns results in\n     |        relational table format.\n     |      \n     |      Returns\n     |      -------\n     |      crosstab : oml.DataFrame\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.pivot_table\n     |  \n     |  cumsum(self, by, ascending=True, na_position='last', skipna=True)\n     |      Gets the cumulative sum of each ``Float`` or ``Integer`` or ``Boolean`` column after the\n     |      ``DataFrame`` object is sorted.\n     |      \n     |      Parameters\n     |      ----------\n     |      by : str or list of str\n     |        A single column name or list of column names by which to sort the \n     |        DataFrame object. Columns in ``by`` do not have to be ``Float`` or ``Integer`` or ``Boolean``.\n     |      ascending : bool or list of bool, True (default)\n     |        If True, sort is in ascending order, otherwise descending. Specify \n     |        list for multiple sort orders. If this is a list of bools, must match\n     |        the length of ``by``.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NaN and None at the beginning, ``last`` places them \n     |        at the end.\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      cumsum : oml.DataFrame\n     |  \n     |  describe(self, percentiles=None, include=None, exclude=None)\n     |      Generates descriptive statistics that summarize the central tendency,\n     |      dispersion, and shape of the data in each column\n     |      \n     |      Parameters\n     |      ----------\n     |      percentiles : bool, list-like of numbers, or None (default), optional \n     |        The percentiles to include in the output for `Float` columns. All\n     |        must be between 0 and 1. If ``percentiles`` is None or True,\n     |        ``percentiles`` is set to ``[.25, .5, .75]``, which corresponds\n     |        to the 25th, 50th, and 75th percentiles. If `percentiles` is False,\n     |        only ``min`` and ``max`` stats and no other percentiles is\n     |        included.\n     |      include : 'all', list-like of OML column types or None (default), optional\n     |        Types of columns to include in the result. Available options:\n     |      \n     |        - 'all': Includes all columns.\n     |        - List of OML column types : Only includes specified types in\n     |          the results.\n     |        - None (default) : If ``Float`` columns exist and ``exclude`` is\n     |          None, only includes ``Float`` columns. Otherwise, includes all\n     |          columns.\n     |      exclude : list of OML column types or None (default), optional\n     |        Types of columns to exclude from the result. Available options:\n     |      \n     |        - List of OML column types : Excludes specified types from\n     |          the results.\n     |        - None (default) : Result excludes nothing.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.DataFrame`\n     |         The concatenation of the summary statistics for each column.\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.count\n     |      DataFrame.max\n     |      DataFrame.min\n     |      DataFrame.mean\n     |      DataFrame.std\n     |      DataFrame.select_types\n     |  \n     |  drop(self, columns)\n     |      Drops specified columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : str or list of str\n     |        Columns to drop from the object.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : oml.DataFrame\n     |  \n     |  drop_duplicates(self, subset=None)\n     |      Removes duplicated rows from oml.DataFrame object.\n     |      \n     |      Use ``subset`` to consider a set of rows duplicates if they have\n     |      identical values for only a subset of the columns. In this case, after\n     |      deduplication, each of the other columns contains the minimum value\n     |      found across the set.\n     |      \n     |      Parameters\n     |      ----------\n     |      subset : str or list of str, optional\n     |        Columns to consider for identifying duplicates. If None, use all\n     |        columns.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : oml.DataFrame\n     |  \n     |  dropna(self, how='any', thresh=None, subset=None)\n     |      Removes rows containing missing values.\n     |      \n     |      Parameters\n     |      ----------\n     |      how : {'any', 'all'}, 'any' (default)\n     |        Determines if row is removed from DataFrame when at least one or all\n     |        values are missing.\n     |      thresh : int, optional\n     |        Requires that many of missing values to drop a row from DataFrame.\n     |      subset : list, optional\n     |        The names of the columns to check for missing values.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : oml.DataFrame\n     |        DataFrame without missing values.\n     |  \n     |  kurtosis(self, skipna=True)\n     |      Returns the sample kurtosis of the values for each ``Float``\n     |      column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      kurt : :py:class:`pandas.Series`\n     |  \n     |  max(self, skipna=True, numeric_only=False)\n     |      Returns the maximum value in each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      numeric_only : boolean, False (default)\n     |        Includes only ``Float``, ``Integer`` and ``Boolean`` columns. \n     |      \n     |      Returns\n     |      -------\n     |      max : :py:class:`pandas.Series`\n     |  \n     |  mean(self, skipna=True)\n     |      Returns the mean of the values for each ``Float`` or ``Integer`` or ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      mean : :py:class:`pandas.Series`\n     |  \n     |  median(self, skipna=True)\n     |      Returns the median of the values for each ``Float`` or ``Integer`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Exclude NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      median : :py:class:`pandas.Series`\n     |  \n     |  merge(self, other, on=None, left_on=None, right_on=None, how='left', suffixes=('_l', '_r'), nvl=True)\n     |      Joins data sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data set object\n     |      on : str or list of str, optional\n     |        Column names to join on. Must be found in both ``self`` and ``other``.\n     |      left_on : str or list of str, optional\n     |        Column names of ``self`` to join on.\n     |      right_on : str or list of str, optional\n     |        Column names of ``other`` to join on. If specified, must specify the same\n     |        number of columns as ``left_on``.\n     |      how : 'left' (default), 'right', 'inner', 'full'\n     |        * left : left outer join\n     |        * right : right outer join\n     |        * full : full outer join\n     |        * inner : inner join\n     |      \n     |        If ``on`` and ``left_on`` are both None, then ``how`` is ignored,\n     |        and a cross join is performed.\n     |      suffixes : sequence of length 2\n     |        Suffix to apply to column names on the left and right side,\n     |        respectively.\n     |      nvl : True (default), False, dict \n     |        * True : join condition includes NULL value\n     |        * False : join condition excludes NULL value\n     |        * dict : specifies the values that join columns use in replacement of NULL value with column names as keys\n     |      \n     |      Returns\n     |      -------\n     |      merged : oml.DataFrame\n     |  \n     |  min(self, skipna=True, numeric_only=False)\n     |      Returns the minimum value in each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      numeric_only : boolean, False (default)\n     |        Includes only ``Float``, ``Integer`` and ``Boolean`` columns\n     |      \n     |      Returns\n     |      -------\n     |      min : :py:class:`pandas.Series`\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns number of unique values for each column of DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : pandas.Series\n     |  \n     |  pivot_table(self, index, columns=None, values=None, aggfunc=<cyfunction DataFrame.mean at 0x7fc1a305b2a0>, margins=False, dropna=True, margins_name='All')\n     |      Converts data set to a spreadsheet-style pivot table. Due to the Oracle\n     |      1000 column limit, pivot tables with more than 1000 columns are\n     |      automatically truncated to display the categories with the most entries\n     |      for each value column.\n     |      \n     |      Parameters\n     |      ----------\n     |      index : str or list of str\n     |        Names of columns containing the keys to group by on the pivot table\n     |        index.\n     |      columns : str or list of str, optional\n     |        Names of columns containing the keys to group by on the pivot table\n     |        columns. \n     |      values : str or list of str, optional\n     |        Names of columns to aggregate on. If None, values are inferred \n     |        as all columns not in ``index`` or ``columns``.\n     |      aggfunc : OML DataFrame aggregation function or a list of them, oml.DataFrame.mean (default)\n     |        The supported oml.DataFrame aggregation functions include: count, max,\n     |        mean, median, min, nunique, std and sum. When using aggregation\n     |        functions, specify the function object using its full name, for example,\n     |        ``oml.DataFrame.sum``, ``oml.DataFrame.nunique``, and so on.\n     |        If ``aggfunc`` contains more than one function, each function is \n     |        applied to each column in ``values``. If the function does not apply to\n     |        the type of a column in ``values``, the result table skips applying \n     |        the function to the particular column. \n     |      margins : bool, False (default)\n     |        Include row and column margins (subtotals)\n     |      dropna : bool, True (default)\n     |        Unless ``columns`` is None, drop column labels from the result table if\n     |        all the entries corresponding to the column label are NaN for all\n     |        aggregations.\n     |      margins_name : string, 'All' (default)\n     |        Names of the row and column that contain the totals when ``margins``\n     |        is True. Should be a value not contained in any of the columns specified\n     |        by ``index`` and ``columns``. \n     |      \n     |      Returns\n     |      -------\n     |      pivoted : oml.DataFrame\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.crosstab\n     |  \n     |  pull(self, aslist=False)\n     |      Pulls data represented by the DataFrame from Oracle Database\n     |      into an in-memory Python object.\n     |      \n     |      Parameters\n     |      ----------\n     |      aslist : bool\n     |        If False, returns a pandas.DataFrame. Otherwise, returns the data\n     |        as a list of tuples.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : :py:class:`pandas.DataFrame` or list of tuples\n     |  \n     |  rename(self, columns)\n     |      Renames columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : dict or list\n     |        ``dict`` contains old and new column names.\n     |        ``list`` contains the new names for all the columns in order.\n     |      \n     |      Notes\n     |      -----\n     |      The method changes the column names of the caller DataFrame object too.\n     |      \n     |      Returns\n     |      -------\n     |      renamed : DataFrame\n     |  \n     |  replace(self, old, new, default=None, columns=None)\n     |      Replace values given in `old` with `new` in specified columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : list of str or None (default)\n     |        Columns to look for values in `old`. If None, then all columns\n     |        of DataFrame will be replaced.\n     |      old : list of float, or list of str\n     |        Specifying the old values. When specified with a list of float, it \n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      new : list of float, or list of str\n     |        A list of the same length as argument `old` specifying \n     |        the new values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      default : float, str, or None (default)\n     |        A single value to use for the non-matched elements in argument\n     |        `old`. If None, non-matched elements will preserve their\n     |        original values. If not None, data type should be consistent\n     |        with values in `new`. Must be set when `old` and `new` contain \n     |        values of different data types.\n     |      \n     |      Returns\n     |      -------\n     |      replaced : oml.DataFrame\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * if values in `old` have data types inconsistent with original values\n     |          in the target columns\n     |        * if `default` is specifed with a non-None value which has data type\n     |          inconsistent with values in `new`\n     |        * if `default` is None when `old` and `new` contain values of different \n     |          data types\n     |  \n     |  round(self, decimals=0)\n     |      Rounds oml.Float values in the oml.DataFrame object to \n     |      the specified decimal place.\n     |      \n     |      Parameters\n     |      ----------\n     |      decimals : non-negative int\n     |      \n     |      Returns\n     |      -------\n     |      rounded: oml.DataFrame\n     |  \n     |  sample(self, frac=None, n=None, random_state=None)\n     |      Return a random sample data sets from an oml.DataFrame object.\n     |      \n     |      Parameters\n     |      ----------\n     |      frac : a float value\n     |        Fraction of data sets to return. The value should be between 0 and 1.\n     |        Cannot be used with n.\n     |      n : an integer value\n     |        Number of rows to return. Default = 1 if frac = None.\n     |        Cannot be used with frac. \n     |      random_state : int or 12345 (default)\n     |        The seed to use for random sampling.\n     |      \n     |      Returns\n     |      -------\n     |      sample_data : an oml.DataFrame objects\n     |        It contains the random sample rows from an oml.DataFrame object.\n     |        The fraction of returned data sets is specified by the frac parameter.\n     |  \n     |  select_types(self, include=None, exclude=None)\n     |      Returns the subset of columns include/excluding columns based on their OML\n     |      type.\n     |      \n     |      Parameters\n     |      ----------\n     |      include, exclude : list of OML column types\n     |        A selection of OML column types to be included/excluded. At least one of\n     |        these parameters must be supplied. \n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If both of ``include`` and ``exclude`` are None.\n     |        * If ``include`` and ``exclude`` have overlapping elements.\n     |      \n     |      Returns\n     |      -------\n     |      subset : oml.DataFrame\n     |  \n     |  skew(self, skipna=True)\n     |      Returns the sample skewness of the values for each ``Float``\n     |      column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      skew : :py:class:`pandas.Series`\n     |  \n     |  sort_values(self, by, ascending=True, na_position='last')\n     |      Specifies the order in which rows appear in the result set.\n     |      \n     |      Parameters\n     |      ----------\n     |      by : str or list of str\n     |        Column names or list of column names.\n     |      ascending : bool or list of bool, True (default)\n     |        If True, sort is in ascending order. Sort is in descending order\n     |        otherwise. Specify list for multiple sort orders. If this is a list of\n     |        bools, must match the length of ``by``.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them \n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : oml.DataFrame\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, strata_cols=None, use_hash=True, hash_cols=None, nvl=None)\n     |      Splits the oml.DataFrame object randomly into multiple data sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) default\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      strata_cols: a list of string values or None (default):\n     |        Names of the columns used for stratification. If None, stratification\n     |        is not performed. Must be None when use_hash is False.\n     |      use_hash: boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use random\n     |        number to split the data.\n     |      hash_cols: a list of string values or None (default):\n     |        If a list of string values, use the values from these named columns\n     |        to hash to split the data. If None, use the values from the 1st 10\n     |        columns to hash.\n     |      nvl: numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of oml.DataFrame objects\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``hash_cols`` refers to a single LOB column.\n     |  \n     |  std(self, skipna=True)\n     |      Returns the sample standard deviation of the values of each ``Float`` or ``Integer`` or ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      std : :py:class:`pandas.Series`\n     |  \n     |  sum(self, skipna=True)\n     |      Returns the sum of the values of each ``Float`` or ``Integer`` or ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Exclude NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      sum : :py:class:`pandas.Series`\n     |  \n     |  t_dot(self, other=None, skipna=True, pull_from_db=True)\n     |      Calculates the matrix cross-product of self with other.\n     |      \n     |      Equivalent to transposing self first, then multiplying it with other. \n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.DataFrame, optional\n     |        If not specified, self is used.\n     |      skipna : bool, True (default)\n     |        Treats NaN entries as 0.\n     |      pull_from_db : bool, True (default)\n     |        If True, returns a pandas.DataFrame. If False, returns a\n     |        oml.DataFrame consisting of three columns:\n     |      \n     |        - ROWID: the row number of the resulting matrix \n     |        - COLID: the column number of the resulting matrix \n     |        - VALUE: the value at the corresponding position of the matrix \n     |      \n     |      Returns\n     |      -------\n     |      prod : int or float, :py:class:`pandas.Series`, or :py:class:`pandas.DataFrame`\n     |      \n     |      See Also\n     |      --------\n     |      oml.Float.dot\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties defined here:\n     |  \n     |  columns\n     |      The column names of the data set.\n     |  \n     |  dtypes\n     |      The types of the columns of the data set.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class Datetime(oml.core.series._Series)\n     |  Datetime series data class.\n     |  \n     |  Represents a single column of Date or difftime data in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Datetime\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(self, other)\n     |      Equivalent to self + other. \n     |      \n     |      Parameters\n     |      ----------\n     |      other : timedelta or oml.Timedelta\n     |        * scalar : add the scalar to each element in ``self``. \n     |        * oml.Timedelta : must come from the same data source. Add corresponding elements in self and other.\n     |      \n     |      Returns\n     |      -------\n     |      sum : oml.Datetime\n     |  \n     |  __contains__(self, item)\n     |      Check whether all elements in ``item`` exists in the String series\n     |      \n     |      Equivalent to ``item in self``.\n     |      \n     |      Parameters\n     |      ----------\n     |      item : datetime, list of datetime, oml.Datetime\n     |        Values to check in series\n     |      \n     |      Returns\n     |      -------\n     |      contains : bool\n     |        Returns ``True`` if all elements exist, otherwise ``False``.\n     |  \n     |  __init__(self)\n     |  \n     |  __sub__(self, other)\n     |      Equivalent to ``self - other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : timedelta, oml.Timedelta, datetime, or oml.Datetime\n     |        * scalar : subtract the scalar from each element in ``self``. \n     |        * oml.Timedelta : must come from the same data source. From each element in self, subtract the corresponding element in other.\n     |        * oml.Datetime : must come from the same data source. From each element in self, subtract the corresponding element in other. \n     |      Returns\n     |      -------\n     |      difference: oml.Datetime or oml.Timedelta\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of datetime and None\n     |  \n     |  replace(self, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None)\n     |      Replace current oml.Datetime object with the specified year, month, day, hour, minute, second, microsecond.\n     |      \n     |      Parameters\n     |      ----------\n     |      year: int or oml.Integer\n     |        the new year to be used.\n     |      month: int or oml.Integer\n     |        the new month\n     |      day: int or oml.Integer\n     |        the new day to be used.\n     |      hour: int or oml.Integer\n     |        the new hour to be used.\n     |      minute: int or oml.Integer\n     |        the new minute to be used\n     |      second: int or oml.Integer\n     |        the new second to be used.\n     |      microsecond: int or oml.Integer\n     |        the new microsecond to be used.\n     |      tzinfo: python datetime.tzinfo object or oml.Timezone\n     |        the new tzinfo to be used.\n     |       \n     |      Returns\n     |      -------\n     |      res: oml.Datetime\n     |        Returns an oml.Datetime object with the same value, except for those parameters\n     |        given new values by whichever keyword arguments are specified.\n     |  \n     |  strftime(self, format=None)\n     |      Converts an oml.Datetime object to an oml.String object controlled by an explicit format string\n     |      \n     |      Parameters:\n     |          format: a string to control the format\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.String\n     |        Returns an oml.String representing oml.Datetime, controlled by an explicit format string.\n     |  \n     |  strptime(date_string=None, format=None)\n     |      Creates an oml.Datetime object from a given oml.String controlled by an explicit format string.\n     |      \n     |      Parameters\n     |      ----------\n     |      date_string: an oml.String object that be converted to oml.Datetime object\n     |      format: a string to control the format\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Datetime\n     |        A oml.Datetime object corresponding to date_string, parsed according to format.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties defined here:\n     |  \n     |  day\n     |      Creates an oml.Float object containing days only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing days only from a given oml.Datetime object\n     |  \n     |  hour\n     |      Creates an oml.Float object containing hours only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing hours only from a given oml.Datetime object\n     |  \n     |  minute\n     |      Creates an oml.Float object containing minutes only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing minutes only from a given oml.Datetime object\n     |  \n     |  month\n     |      Creates an oml.Float object containing months only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing months only from a given oml.Datetime object\n     |  \n     |  second\n     |      Creates an oml.Float object containing seconds only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing seconds only from a given oml.Datetime object\n     |  \n     |  tzinfo\n     |      Get time zone information from a given oml.Datetime object when available\n     |            \n     |      Returns\n     |      -------\n     |      res: oml.Timezone or None\n     |        An oml.Timezone object containing timezone only or None\n     |  \n     |  year\n     |      Creates an oml.Float object containing years only from a given oml.Datetime object\n     |      \n     |      Returns\n     |      -------\n     |      res: oml.Float\n     |        A oml.Float object containing years only from a given oml.Datetime object\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class Float(oml.core.number._Number)\n     |  Float(other, dbtype=None)\n     |  \n     |  Numeric series data class.\n     |  \n     |  Represents a single column of NUMBER, BINARY_DOUBLE or BINARY_FLOAT data \n     |  in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Float\n     |      oml.core.number._Number\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __abs__(self)\n     |      Return the absolute value of every element in ``self``.\n     |      \n     |      Equivalent to ``abs(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      absval : oml.Float\n     |  \n     |  __add__(self, other)\n     |      Equivalent to ``self + other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, oml.Integer, float, or oml.Float\n     |        * scalar : add the scalar to each element in ``self``. \n     |        * oml.Float : must come from the same data source. Add corresponding\n     |          elements in ``self`` and ``other``.\n     |        * oml.Integer : must come from the same data source. Add corresponding\n     |          elements in ``self`` and ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      sum : oml.Float\n     |  \n     |  __contains__(self, item)\n     |      Check whether all elements in ``item`` exists in the Float series\n     |      \n     |      Equivalent to ``item in self``.\n     |      \n     |      Parameters\n     |      ----------\n     |      item : int/float, list of int/float, oml.Float\n     |        Values to check in series\n     |      \n     |      Returns\n     |      -------\n     |      contains : bool\n     |        Returns `True` if all elements exists, otherwise `False`\n     |  \n     |  __divmod__(self, other)\n     |      Equivalent to ``divmod(self, other)``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, oml.Integer, float, or oml.Float\n     |        * scalar : Find the quotient and remainder when each element in ``self`` is\n     |          divided by the scalar.\n     |        * oml.Float : must come from the same data source. Find the quotient and\n     |          remainder when each element in ``self`` is divided by the corresponding element\n     |          in ``other``.\n     |        * oml.Integer : must come from the same data source. Find the quotient and\n     |          remainder when each element in ``self`` is divided by the corresponding element\n     |          in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      divrem : oml.DataFrame\n     |        The first column contains the floor of the quotient, and the second column\n     |        contains the remainder.\n     |  \n     |  __floordiv__(self, other)\n     |      Equivalent to ``self // other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, oml.Integer, float, or oml.Float\n     |        * scalar : divide each element in ``self`` by the scalar. \n     |        * oml.Float : must come from the same data source. Divide each element in\n     |          ``self`` by the corresponding element in ``other``.\n     |        * oml.Integer : must come from the same data source. Divide each element in\n     |          ``self`` by the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      quotient : oml.Float\n     |  \n     |  __init__(self, other, dbtype=None)\n     |      Convert to oml.Float, or convert underlying Oracle Database type.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Boolean, oml.Integer, or oml.Float\n     |        * oml.Boolean : initialize a oml.Float object that has value 1 (resp. 0)\n     |          wherever ``other`` has value True (resp. False).\n     |        * oml.Integer : initialize a oml.Float object with the same value of\n     |          oml.Integer object as ``other``.\n     |        * oml.Float : initialize a oml.Float object with the same data as \n     |          ``other``, except the underlying Oracle Database type has been converted\n     |          to the one specified by ``dbtype``.\n     |      dbtype : 'number' or 'binary_double'\n     |        Ignored if ``other`` is type ``oml.Boolean``. Must be specified if ``other``\n     |        is type ``oml.Float``.\n     |  \n     |  __matmul__(self, other)\n     |      Equivalent to ``self @ other`` and ``self.dot(other)``.\n     |      \n     |      Returns the inner product with an oml.Float. Matrix multiplication with a\n     |      oml.DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Float or oml.DataFrame\n     |      \n     |      Returns\n     |      -------\n     |      matprod : oml.Float\n     |      \n     |      See Also\n     |      --------\n     |      Float.dot\n     |  \n     |  __mod__(self, other)\n     |      Equivalent to ``self % other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, oml.Integer, float, or oml.Float\n     |        * scalar : Find the remainder when each element in ``self`` is divided by the\n     |          scalar.\n     |        * oml.Float : must come from the same data source. Find the remainder when each\n     |          element in ``self`` is divided by the corresponding element in ``other``.\n     |        * oml.Integer : must come from the same data source. Find the remainder when each\n     |          element in ``self`` is divided by the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      remainder : oml.Float\n     |  \n     |  __mul__(self, other)\n     |      Equivalent to ``self * other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, oml.Integer, float, or oml.Float",
              "type" : "TEXT"
            },
            {
              "message" : "<div class=\"result-alert alert-warning\" role=\"alert\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>Interpreter output limit reached.</div>",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [ ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 1691520736257,
          "endTime" : 1691520736481,
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h2>Learn More</h2>\n<ul>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/omlug/get-started-notebooks-data-analysis-and-data-visualization1.html\" >Get Started with OML4Py and OML Notebooks</a></li>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/\" >Oracle Machine Learning Notebooks</a></li>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/omlug/get-started-notebooks-ea-data-analysis-and-data-visualization.html#GUID-B309C607-2232-43E2-B4A1-655DB295B90B\" >Oracle Machine Learning Notebooks - Early Adopter</a></li>\n</ul>\n<p><strong>Last Updated Date</strong> - August 2023</p>\n<p><strong>Copyright (c) 2023 Oracle Corporation</strong>\n<br  /><a href=\"https: //oss.oracle.com/licenses/upl/\" >The Universal Permissive License (UPL), Version 1.0</a></p>\n<hr />\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      }
    ]
  }
]